<?php

// 1. С помощью оператора echo выведите на страницу:

// a. Строковую переменную

$string = "Строка";
echo $string . "</br>";

// b. Целочисленную переменную

$int = 1;
echo $int . "</br>";

// c. Переменную дробного типа

$float = 1.5;
echo $float . "</br>";

// d. константу

const CONSTANT = 1;
echo CONSTANT . "</br>";

// e. число в восьмеричной нотации

$oct = decoct($int);
echo $oct . "</br>";

// f. число в шестнадцатеричной нотации

$hex = dechex($int);
echo $hex . "</br>";

// 2. Повторите вывод, заключив переменные в двойные кавычки (“). Посмотрите, что
// получится.

$string = "Строка";
echo "$string" . "</br>";

$int = 1;
echo "$int" . "</br>";

$float = 1.5;
echo "$float" . "</br>";

const CONSTANT = 1;
echo "CONSTANT" . "</br>";

$oct = decoct($int);
echo "$oct" . "</br>";

$hex = dechex($int);
echo "$hex" . "</br>";

/*Ничего не изменилось, кроме вывода константы. Константа выводится как строка*/

// Повторите вывод, заключив переменные в одинарные кавычки (‘). Посмотрите, что
// получится.

$string = "Строка";
echo '$string' . "</br>";

$int = 1;
echo '$int' . "</br>";

$float = 1.5;
echo '$float' . "</br>";

const CONSTANT = 1;
echo 'CONSTANT' . "</br>";

$oct = decoct($int);
echo '$oct' . "</br>";

$hex = dechex($int);
echo '$hex' . "</br>";

/*При использовании одинарных ковычек на экран выводятся наименования переменных, а не их значения*/

// 3. Выведите в восьмеричной системе числа от 10 до 20 (echo 010; echo 011; echo 012; …
// echo 019; echo 020;) Объясните результат.

for ($i = 10; $i <= 20; $i++) { // для вывода чисел был использован цикл for
	echo "0" . $i . "</br>"; // для добавления нуля в начало числа используется конкатенация
}

// 4. Выведите 16 чисел в шестнадцатеричной системе, так чтобы в браузере отобразилось
// «0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15»

for ($i = 0; $i <= 9; $i++) {
	echo hexdec($i) . " ";
}

$arr = ["A", "B", "C", "D", "E", "F"];
foreach ($arr as $letter) {
	echo hexdec($letter) . " ";
}
echo "</br>";

// 5. Выведите на экран любое четверостишие.
// Для каждой новой строки используйте отдельный оператор echo. Каждая строчка
// должна быть отдельной строковой переменной. Также необходимо использовать
// переводы строки. После четверостишия поставьте инициалы автора и выделите их
// курсивом.

$first = "Я помню чудное мгновенье:";
$second = "Передо мной явилась ты,";
$third = "Как мимолетное виденье,";
$fourth = "Как гений чистой красоты.";

echo $first . "</br>";
echo $second . "</br>";
echo $third . "</br>";
echo $fourth . "</br>";
echo "<i>А.С. Пушкин</i>" . "</br>";

// 6. Выполните эти же действия, с помощью одного оператора echo.

echo $first . "</br>" . $second . "</br>" . $third . "</br>" . $fourth . "</br>" . "<i>А.С. Пушкин</i>" . "</br>";

// 7. Попробуйте в выражении использовать разные типы, например, сложите число «10» и
// строку «привет». Что получится? Объясните результат.

//echo "привет" + 10 . "</br>"; // При таком выражении получим Warning.
echo "10" + 10 . "</br>"; // PHP - язык со слабой (нестрогой) типизацией. В этом случае сам переводит строку "10" в числовой тип.

// 8. Дайте ответ на вопрос, как работает оператор xor? В каких случаях он возвращает
// значение true, в каких – false? Для этого напишите скрипт, который выводит значения
// операций со всеми возможными вариантами операндов (4 варианта). Чему равно $a xor
// $a для любых значений $a?

// xor - исключающее или. Возвращает true, если $a = true и $b = false или $a = false и $b = true.
// в других случаях, когда оба операнда имеют одинаковое значение (true/false) - возвращает false.

function trueOrFalseXor($a, $b)
{
	if ($a == true && $b == false) {
		return true;
	} elseif ($a == false && $b == true) {
		return true;
	} else {
		return false;
	}
}